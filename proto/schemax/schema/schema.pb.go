// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: schemax/schema/schema.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Set is a set of queries and schemas.
type Set struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*Query               `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	Schemas       []*Schema              `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Set) Reset() {
	*x = Set{}
	mi := &file_schemax_schema_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Set) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Set) GetSchemas() []*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

// Query is a query.
type Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment       string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Exec          bool                   `protobuf:"varint,4,opt,name=exec,proto3" json:"exec,omitempty"`
	Flat          bool                   `protobuf:"varint,5,opt,name=flat,proto3" json:"flat,omitempty"`
	One           bool                   `protobuf:"varint,6,opt,name=one,proto3" json:"one,omitempty"`
	Interpolate   bool                   `protobuf:"varint,7,opt,name=interpolate,proto3" json:"interpolate,omitempty"`
	Type          string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	TypeComment   string                 `protobuf:"bytes,9,opt,name=type_comment,json=typeComment,proto3" json:"type_comment,omitempty"`
	Fields        []*Field               `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
	ManualFields  bool                   `protobuf:"varint,11,opt,name=manual_fields,json=manualFields,proto3" json:"manual_fields,omitempty"` // fields generated or provided by user
	Params        []*Field               `protobuf:"bytes,12,rep,name=params,proto3" json:"params,omitempty"`
	Query         []string               `protobuf:"bytes,13,rep,name=query,proto3" json:"query,omitempty"`
	Comments      []string               `protobuf:"bytes,14,rep,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_schemax_schema_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Query) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Query) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Query) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Query) GetExec() bool {
	if x != nil {
		return x.Exec
	}
	return false
}

func (x *Query) GetFlat() bool {
	if x != nil {
		return x.Flat
	}
	return false
}

func (x *Query) GetOne() bool {
	if x != nil {
		return x.One
	}
	return false
}

func (x *Query) GetInterpolate() bool {
	if x != nil {
		return x.Interpolate
	}
	return false
}

func (x *Query) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Query) GetTypeComment() string {
	if x != nil {
		return x.TypeComment
	}
	return ""
}

func (x *Query) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Query) GetManualFields() bool {
	if x != nil {
		return x.ManualFields
	}
	return false
}

func (x *Query) GetParams() []*Field {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Query) GetQuery() []string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Query) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

// Schema is a SQL schema.
type Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enums         []*Enum                `protobuf:"bytes,3,rep,name=enums,proto3" json:"enums,omitempty"`
	Procs         []*Proc                `protobuf:"bytes,4,rep,name=procs,proto3" json:"procs,omitempty"`
	Tables        []*Table               `protobuf:"bytes,5,rep,name=tables,proto3" json:"tables,omitempty"`
	Views         []*Table               `protobuf:"bytes,6,rep,name=views,proto3" json:"views,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_schemax_schema_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Schema) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetEnums() []*Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *Schema) GetProcs() []*Proc {
	if x != nil {
		return x.Procs
	}
	return nil
}

func (x *Schema) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *Schema) GetViews() []*Table {
	if x != nil {
		return x.Views
	}
	return nil
}

// Enum is a enum type.
type Enum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values        []*Field               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Enum) Reset() {
	*x = Enum{}
	mi := &file_schemax_schema_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Enum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enum) GetValues() []*Field {
	if x != nil {
		return x.Values
	}
	return nil
}

// Proc is a stored procedure.
type Proc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // 'procedure' or 'function'
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Params        []*Field               `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	Returns       []*Field               `protobuf:"bytes,5,rep,name=returns,proto3" json:"returns,omitempty"`
	Void          bool                   `protobuf:"varint,6,opt,name=void,proto3" json:"void,omitempty"`
	Definition    string                 `protobuf:"bytes,7,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proc) Reset() {
	*x = Proc{}
	mi := &file_schemax_schema_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proc) ProtoMessage() {}

func (x *Proc) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proc.ProtoReflect.Descriptor instead.
func (*Proc) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Proc) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Proc) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Proc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Proc) GetParams() []*Field {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Proc) GetReturns() []*Field {
	if x != nil {
		return x.Returns
	}
	return nil
}

func (x *Proc) GetVoid() bool {
	if x != nil {
		return x.Void
	}
	return false
}

func (x *Proc) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// Table is a table or view.
type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // 'table' or 'view'
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Columns       []*Field               `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	PrimaryKeys   []*Field               `protobuf:"bytes,4,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	Indexes       []*Index               `protobuf:"bytes,5,rep,name=indexes,proto3" json:"indexes,omitempty"`
	ForeignKeys   []*ForeignKey          `protobuf:"bytes,6,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	Manual        bool                   `protobuf:"varint,7,opt,name=manual,proto3" json:"manual,omitempty"`
	Definition    string                 `protobuf:"bytes,8,opt,name=definition,proto3" json:"definition,omitempty"` // empty for tables
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_schemax_schema_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{5}
}

func (x *Table) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetColumns() []*Field {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Table) GetPrimaryKeys() []*Field {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *Table) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *Table) GetForeignKeys() []*ForeignKey {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *Table) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *Table) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// Index is a index.
type Index struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                             // index name
	Fields        []*Field               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`                         // column that has the index on it
	IsUnique      bool                   `protobuf:"varint,3,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`    // is the index unique
	IsPrimary     bool                   `protobuf:"varint,4,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"` // is the index primary
	Func          string                 `protobuf:"bytes,5,opt,name=func,proto3" json:"func,omitempty"`                             // index func name (based on index mode)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Index) Reset() {
	*x = Index{}
	mi := &file_schemax_schema_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{6}
}

func (x *Index) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Index) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Index) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *Index) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Index) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

// // ForeignKey is a foreign key.
type ForeignKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // constraint name
	Fields        []*Field               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`                        // column that has the key on it
	RefTable      string                 `protobuf:"bytes,3,opt,name=ref_table,json=refTable,proto3" json:"ref_table,omitempty"`    // table the foreign key refers to
	RefFields     []*Field               `protobuf:"bytes,4,rep,name=ref_fields,json=refFields,proto3" json:"ref_fields,omitempty"` // column in ref table the index refers to
	Func          string                 `protobuf:"bytes,5,opt,name=func,proto3" json:"func,omitempty"`                            // foreign key func name (based on fkey mode)
	RefFunc       string                 `protobuf:"bytes,6,opt,name=ref_func,json=refFunc,proto3" json:"ref_func,omitempty"`       // func name from ref index
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForeignKey) Reset() {
	*x = ForeignKey{}
	mi := &file_schemax_schema_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignKey) ProtoMessage() {}

func (x *ForeignKey) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignKey.ProtoReflect.Descriptor instead.
func (*ForeignKey) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{7}
}

func (x *ForeignKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForeignKey) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ForeignKey) GetRefTable() string {
	if x != nil {
		return x.RefTable
	}
	return ""
}

func (x *ForeignKey) GetRefFields() []*Field {
	if x != nil {
		return x.RefFields
	}
	return nil
}

func (x *ForeignKey) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *ForeignKey) GetRefFunc() string {
	if x != nil {
		return x.RefFunc
	}
	return ""
}

// Field is a column, index, enum value, or stored procedure parameter.
type Field struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          *Type                  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Default       string                 `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	IsPrimary     bool                   `protobuf:"varint,4,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsSequence    bool                   `protobuf:"varint,5,opt,name=is_sequence,json=isSequence,proto3" json:"is_sequence,omitempty"`
	ConstValue    *int32                 `protobuf:"varint,6,opt,name=const_value,json=constValue,proto3,oneof" json:"const_value,omitempty"`
	Interpolate   bool                   `protobuf:"varint,7,opt,name=interpolate,proto3" json:"interpolate,omitempty"`
	Join          bool                   `protobuf:"varint,8,opt,name=join,proto3" json:"join,omitempty"`
	Comment       string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_schemax_schema_schema_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Field) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Field) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Field) GetIsSequence() bool {
	if x != nil {
		return x.IsSequence
	}
	return false
}

func (x *Field) GetConstValue() int32 {
	if x != nil && x.ConstValue != nil {
		return *x.ConstValue
	}
	return 0
}

func (x *Field) GetInterpolate() bool {
	if x != nil {
		return x.Interpolate
	}
	return false
}

func (x *Field) GetJoin() bool {
	if x != nil {
		return x.Join
	}
	return false
}

func (x *Field) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// Type holds information for a database type.
// ParseType parses "type[ (precision[,scale])][\[\]]" strings returning the
// parsed precision, scale, and if the type is an array or not.
//
// Expected formats:
//
//		type
//		type(precision)
//		type(precision, scale)
//	 type(precision, scale) unsigned
//		timestamp(n) with [local] time zone (oracle only)
//
// The returned type is stripped of precision and scale.
type Type struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Prec          int32                  `protobuf:"varint,2,opt,name=prec,proto3" json:"prec,omitempty"`
	Scale         int32                  `protobuf:"varint,3,opt,name=scale,proto3" json:"scale,omitempty"`
	Nullable      bool                   `protobuf:"varint,4,opt,name=nullable,proto3" json:"nullable,omitempty"`
	IsArray       bool                   `protobuf:"varint,5,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
	Unsigned      bool                   `protobuf:"varint,6,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
	Enum          *Enum                  `protobuf:"bytes,7,opt,name=enum,proto3" json:"enum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Type) Reset() {
	*x = Type{}
	mi := &file_schemax_schema_schema_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_schemax_schema_schema_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_schemax_schema_schema_proto_rawDescGZIP(), []int{9}
}

func (x *Type) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Type) GetPrec() int32 {
	if x != nil {
		return x.Prec
	}
	return 0
}

func (x *Type) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *Type) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *Type) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

func (x *Type) GetUnsigned() bool {
	if x != nil {
		return x.Unsigned
	}
	return false
}

func (x *Type) GetEnum() *Enum {
	if x != nil {
		return x.Enum
	}
	return nil
}

var File_schemax_schema_schema_proto protoreflect.FileDescriptor

var file_schemax_schema_schema_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x68, 0x0a,
	0x03, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x6c, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x6e,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xe8, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x63, 0x73, 0x12, 0x2d,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x49, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x02, 0x0a, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x38, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9a, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x22, 0xd1, 0x01, 0x0a,
	0x0a, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x72, 0x65, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x46, 0x75, 0x6e, 0x63,
	0x22, 0xa5, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x34, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x79, 0x6f, 0x4a, 0x65,
	0x72, 0x72, 0x79, 0x59, 0x75, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x78, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schemax_schema_schema_proto_rawDescOnce sync.Once
	file_schemax_schema_schema_proto_rawDescData = file_schemax_schema_schema_proto_rawDesc
)

func file_schemax_schema_schema_proto_rawDescGZIP() []byte {
	file_schemax_schema_schema_proto_rawDescOnce.Do(func() {
		file_schemax_schema_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schemax_schema_schema_proto_rawDescData)
	})
	return file_schemax_schema_schema_proto_rawDescData
}

var file_schemax_schema_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_schemax_schema_schema_proto_goTypes = []any{
	(*Set)(nil),        // 0: schemax.schema.Set
	(*Query)(nil),      // 1: schemax.schema.Query
	(*Schema)(nil),     // 2: schemax.schema.Schema
	(*Enum)(nil),       // 3: schemax.schema.Enum
	(*Proc)(nil),       // 4: schemax.schema.Proc
	(*Table)(nil),      // 5: schemax.schema.Table
	(*Index)(nil),      // 6: schemax.schema.Index
	(*ForeignKey)(nil), // 7: schemax.schema.ForeignKey
	(*Field)(nil),      // 8: schemax.schema.Field
	(*Type)(nil),       // 9: schemax.schema.Type
}
var file_schemax_schema_schema_proto_depIdxs = []int32{
	1,  // 0: schemax.schema.Set.queries:type_name -> schemax.schema.Query
	2,  // 1: schemax.schema.Set.schemas:type_name -> schemax.schema.Schema
	8,  // 2: schemax.schema.Query.fields:type_name -> schemax.schema.Field
	8,  // 3: schemax.schema.Query.params:type_name -> schemax.schema.Field
	3,  // 4: schemax.schema.Schema.enums:type_name -> schemax.schema.Enum
	4,  // 5: schemax.schema.Schema.procs:type_name -> schemax.schema.Proc
	5,  // 6: schemax.schema.Schema.tables:type_name -> schemax.schema.Table
	5,  // 7: schemax.schema.Schema.views:type_name -> schemax.schema.Table
	8,  // 8: schemax.schema.Enum.values:type_name -> schemax.schema.Field
	8,  // 9: schemax.schema.Proc.params:type_name -> schemax.schema.Field
	8,  // 10: schemax.schema.Proc.returns:type_name -> schemax.schema.Field
	8,  // 11: schemax.schema.Table.columns:type_name -> schemax.schema.Field
	8,  // 12: schemax.schema.Table.primary_keys:type_name -> schemax.schema.Field
	6,  // 13: schemax.schema.Table.indexes:type_name -> schemax.schema.Index
	7,  // 14: schemax.schema.Table.foreign_keys:type_name -> schemax.schema.ForeignKey
	8,  // 15: schemax.schema.Index.fields:type_name -> schemax.schema.Field
	8,  // 16: schemax.schema.ForeignKey.fields:type_name -> schemax.schema.Field
	8,  // 17: schemax.schema.ForeignKey.ref_fields:type_name -> schemax.schema.Field
	9,  // 18: schemax.schema.Field.type:type_name -> schemax.schema.Type
	3,  // 19: schemax.schema.Type.enum:type_name -> schemax.schema.Enum
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_schemax_schema_schema_proto_init() }
func file_schemax_schema_schema_proto_init() {
	if File_schemax_schema_schema_proto != nil {
		return
	}
	file_schemax_schema_schema_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schemax_schema_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schemax_schema_schema_proto_goTypes,
		DependencyIndexes: file_schemax_schema_schema_proto_depIdxs,
		MessageInfos:      file_schemax_schema_schema_proto_msgTypes,
	}.Build()
	File_schemax_schema_schema_proto = out.File
	file_schemax_schema_schema_proto_rawDesc = nil
	file_schemax_schema_schema_proto_goTypes = nil
	file_schemax_schema_schema_proto_depIdxs = nil
}
